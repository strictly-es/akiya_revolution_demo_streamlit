import streamlit as st

class MarketFactors:
    """ Â∏ÇÂ†¥Áí∞Â¢É„ÅÆ„Éá„Éº„Çø„Çí‰øùÊåÅ """
    def __init__(self, area_type: str, factors: dict, epsilon: float = 0.0):
        self.area_type = area_type
        self.factors = factors
        self.epsilon = epsilon

class MarketPotentialCalculator:
    """ Â∏ÇÂ†¥„Éù„ÉÜ„É≥„Ç∑„É£„É´(Potential_score)„ÇíË®àÁÆó """
    FACTOR_RANGES = {
        "kamakura": {
            "population": 1000000, "distance_from_station": 20,
            "tourist": 100000, "household_income": 10000000
        },
        "hayama": {
            "population": 500000, "distance_from_station": 40,
            "tourist": 3000, "household_income": 8000000
        }
    }

    WEIGHTS = {
        "kamakura": {
            "cafe": {"population": 0.4, "distance_from_station": 0.2, "tourist": 0.2, "household_income": 0.2},
            "accommodation": {"population": 0.2, "distance_from_station": 0.2, "tourist": 0.3, "household_income": 0.3},
            "shareAtelier": {"population": 0.25, "distance_from_station": 0.25, "tourist": 0.25, "household_income": 0.25}
        },
        "hayama": {
            "cafe": {"population": 0.2, "distance_from_station": 0.2, "tourist": 0.3, "household_income": 0.3},
            "accommodation": {"population": 0.4, "distance_from_station": 0.1, "tourist": 0.4, "household_income": 0.1},
            "shareAtelier": {"population": 0.25, "distance_from_station": 0.25, "tourist": 0.25, "household_income": 0.25}
        }
    }

    @classmethod
    def _normalize_factor(cls, area_type, factor_name, value):
        max_val = cls.FACTOR_RANGES[area_type].get(factor_name, 0)
        if factor_name == "distance_from_station":
            return max(0.0, 1.0 - (value / max_val)) if value < max_val else 0.0
        return min(1.0, value / max_val)

    @classmethod
    def calculate(cls, factors: MarketFactors, business_type: str):
        weights = cls.WEIGHTS[factors.area_type].get(business_type, {})
        weighted_sum = sum(weights.get(f, 0) * cls._normalize_factor(factors.area_type, f, v) for f, v in factors.factors.items())
        return weighted_sum + factors.epsilon

class Business:
    """ ‰∫ãÊ•≠„ÅÆÂèéÊîØË®àÁÆó """
    def __init__(self, name, initial_investment, users, unit_price, other_revenue, costs):
        self.name = name
        self.initial_investment = initial_investment
        self.users = users
        self.unit_price = unit_price
        self.other_revenue = other_revenue
        self.costs = costs

    def calc_monthly_revenue(self, market_score=1.0):
        return int(self.users * self.unit_price * market_score + self.other_revenue)

    def calc_monthly_cost(self):
        return sum(self.costs.values())

    def summary_dict(self, market_score):
        monthly_revenue = self.calc_monthly_revenue(market_score)
        monthly_cost = self.calc_monthly_cost()
        monthly_profit = monthly_revenue - monthly_cost
        profit_ratio = (monthly_profit / monthly_cost * 100) if monthly_cost else 0.0
        payback_period = (self.initial_investment / monthly_profit) / 12 if monthly_profit else float('inf')

        return {
            "name": self.name,
            "Â∏ÇÂ†¥„Çπ„Ç≥„Ç¢": f"{market_score:.2f}",
            "ÂàùÊúüÊäïË≥áÈ°ç": f"{self.initial_investment:,}ÂÜÜ",
            "ÊúàÈñìÂ£≤‰∏ä": f"{monthly_revenue:,}ÂÜÜ",
            "ÊúàÈñìÁµåË≤ª": f"{monthly_cost:,}ÂÜÜ",
            "ÊúàÈñìÂà©Áõä": f"{monthly_profit:,}ÂÜÜ",
            "ÂèéÁõäÁéá": f"{profit_ratio:.1f}%",
            "ÂõûÂèéÊúüÈñì": f"{payback_period:.2f}Âπ¥"
        }

st.title("AKIYA Revolution!")

# „É©„Éô„É´ÔºàË°®Á§∫ÂêçÔºâ„Å®ÂØæÂøú„Åô„ÇãÂÄ§„ÅÆËæûÊõ∏
area_options = {
    "ÈéåÂÄâÂ∏ÇÁî±ÊØî„É∂Êµú / Â∞èÂ£≤Â∫ó": "kamakura",
    "ËëâÂ±±Áî∫Â†ÄÂÜÖ / Êà∏Âª∫‰ΩèÂÆÖ": "hayama"
}

# „É¶„Éº„Ç∂„Éº„Å´Ë°®Á§∫„Åô„ÇãÈÅ∏ÊäûËÇ¢Ôºà„Ç≠„Éº„ÅÆ„É™„Çπ„ÉàÔºâ
selected_label = st.selectbox("‰ΩèÊâÄ / ÂæìÂâç„ÅÆÂà©Áî®Áî®ÈÄî", list(area_options.keys()))

# ÈÅ∏Êäû„Åï„Çå„ÅüÂÄ§„ÇíÂèñÂæóÔºàËæûÊõ∏„Åã„ÇâÂØæÂøú„Åô„Çã value „ÇíÂèñÂæóÔºâ
area_type = area_options[selected_label]
area_type = "kamakura" if "kamakura" in area_type else "hayama"
#st.write(f"ÈÅ∏Êäû„Åï„Çå„Åü„Ç®„É™„Ç¢: {area_type}")

if area_type == "kamakura":
    market_factors = MarketFactors(
        area_type="kamakura",
        factors={
            "population": 800000, 
            "distance_from_station": 10, 
            "tourist": 90000, 
            "household_income": 7_000_000
        },
        epsilon=0.5
    )

    businesses = {
        "cafe": Business(
            name="„Ç´„Éï„Çß",
            initial_investment=25_000_000, 
            users=2_500,
            unit_price=1_300, 
            other_revenue=50_000,
            costs={
                "‰∫∫‰ª∂Ë≤ª": 1_500_000,
                "Ê∞¥ÈÅìÂÖâÁÜ±Ë≤ª": 50_000,
                "ÈÄö‰ø°Ë≤ª": 6_000,
                "Ê∏ÖÊéÉË≤ª": 70_000,
                "Ê∂àËÄóÂìÅË≤ª": 150_000,
                "‰øùÈô∫Êñô": 5_000,
                "‰øÆÁπïË≤ª": 0, 
                "Âú∞‰ª£ÂÆ∂Ë≥É": 150_000,
                "„Åù„ÅÆ‰ªñÁµåË≤ª": 821_500
            }
        ),
        "accommodation": Business(
            name="ÂÆøÊ≥äÊñΩË®≠",
            initial_investment=65_000_000,
            users=150,
            unit_price=25_000,
            other_revenue=500_000,
            costs={
                "‰∫∫‰ª∂Ë≤ª": 3_000_000,
                "Ê∞¥ÈÅìÂÖâÁÜ±Ë≤ª": 50_000,
                "ÈÄö‰ø°Ë≤ª": 6_000,
                "Ê∏ÖÊéÉË≤ª": 500_000,
                "Ê∂àËÄóÂìÅË≤ª": 700_000,
                "‰øùÈô∫Êñô": 2_000,
                "‰øÆÁπïË≤ª": 0,
                "Âú∞‰ª£ÂÆ∂Ë≥É": 200_000,
                "„Åù„ÅÆ‰ªñÁµåË≤ª": 192_000
            },
        ),
        "shareAtelier": Business(
            name="„Ç∑„Çß„Ç¢„Ç¢„Éà„É™„Ç®",
            initial_investment=40_000_000,
            users=30,
            unit_price=65_000,
            other_revenue=500_000,
            costs={
                "‰∫∫‰ª∂Ë≤ª": 2_000_000,
                "Ê∞¥ÈÅìÂÖâÁÜ±Ë≤ª": 30_000,
                "ÈÄö‰ø°Ë≤ª": 6_000,
                "Ê∏ÖÊéÉË≤ª": 100_000,
                "Ê∂àËÄóÂìÅË≤ª": 50_000,
                "‰øùÈô∫Êñô": 2_000,
                "‰øÆÁπïË≤ª": 0,
                "Âú∞‰ª£ÂÆ∂Ë≥É": 100_000,
                "„Åù„ÅÆ‰ªñÁµåË≤ª": 100_000
            }
        )
    }

else:  # hayama
    market_factors = MarketFactors(
        area_type="hayama",
        factors={
            "population": 600000,
            "distance_from_station": 25,
            "tourist": 50000,
            "household_income": 6_000_000
        },
        epsilon=0.5
    )

    # ÂÆøÊ≥äÊñΩË®≠„ÇíÊúÄÂº∑: ÂàùÊúüÊäïË≥á‰∏ã„Åí & Âà©Áî®‰∫∫Êï∞‚Üë & Âçò‰æ°‚Üë
    businesses = {
        "cafe": Business(
            name="„Ç´„Éï„Çß",
            initial_investment=30_000_000,
            users=2_500,
            unit_price=1_100,
            other_revenue=50_000,
            costs={
                "‰∫∫‰ª∂Ë≤ª": 1_500_000,
                "Ê∞¥ÈÅìÂÖâÁÜ±Ë≤ª": 50_000,
                "ÈÄö‰ø°Ë≤ª": 6_000,
                "Ê∏ÖÊéÉË≤ª": 70_000,
                "Ê∂àËÄóÂìÅË≤ª": 150_000,
                "‰øùÈô∫Êñô": 5_000,
                "‰øÆÁπïË≤ª": 0, 
                "Âú∞‰ª£ÂÆ∂Ë≥É": 150_000,
                "„Åù„ÅÆ‰ªñÁµåË≤ª": 821_500
            }
        ),
        "accommodation": Business(
            name="ÂÆøÊ≥äÊñΩË®≠",
            initial_investment=60_000_000, 
            users=150,                      
            unit_price=30_000,          
            other_revenue=500_000,
            costs={
                "‰∫∫‰ª∂Ë≤ª": 3_000_000,
                "Ê∞¥ÈÅìÂÖâÁÜ±Ë≤ª": 50_000,
                "ÈÄö‰ø°Ë≤ª": 6_000,
                "Ê∏ÖÊéÉË≤ª": 500_000,
                "Ê∂àËÄóÂìÅË≤ª": 700_000,
                "‰øùÈô∫Êñô": 2_000,
                "‰øÆÁπïË≤ª": 0,
                "Âú∞‰ª£ÂÆ∂Ë≥É": 200_000,
                "„Åù„ÅÆ‰ªñÁµåË≤ª": 192_000
            },
        ),
        "shareAtelier": Business(
            name="„Ç∑„Çß„Ç¢„Ç¢„Éà„É™„Ç®",
            initial_investment=40_000_000,
            users=30,
            unit_price=65_000,
            other_revenue=500_000,
            costs={
                "‰∫∫‰ª∂Ë≤ª": 2_000_000,
                "Ê∞¥ÈÅìÂÖâÁÜ±Ë≤ª": 30_000,
                "ÈÄö‰ø°Ë≤ª": 6_000,
                "Ê∏ÖÊéÉË≤ª": 100_000,
                "Ê∂àËÄóÂìÅË≤ª": 50_000,
                "‰øùÈô∫Êñô": 2_000,
                "‰øÆÁπïË≤ª": 0,
                "Âú∞‰ª£ÂÆ∂Ë≥É": 100_000,
                "„Åù„ÅÆ‰ªñÁµåË≤ª": 100_000
            }
        )
    }



# ÂàÜÊûêÂÆüË°å„Éú„Çø„É≥
if st.button("‰∫ãÊ•≠„ÇíÊé®Ëñ¶"):
    results = []
    for name, business in businesses.items():
        market_score = MarketPotentialCalculator.calculate(market_factors, name)
        results.append(business.summary_dict(market_score))

    # ÂèéÁõäÁéá„ÅÆÊúÄÂ§ßÂÄ§„Å®ÂõûÂèéÊúüÈñì„ÅÆÊúÄÂ∞èÂÄ§„ÇíË¶ã„Å§„Åë„Çã
    best_profit = max(results, key=lambda r: float(r['ÂèéÁõäÁéá'].replace('%', '')))
    best_payback = min(results, key=lambda r: float(r['ÂõûÂèéÊúüÈñì'].replace('Âπ¥', '')))

    # „Éè„Ç§„É©„Ç§„ÉàÁî®„ÅÆ„Çø„Ç§„Éà„É´
    st.markdown("### üèÜ **„Åä„Åô„Åô„ÇÅ„ÅÆ‰∫ãÊ•≠**")

    # ÂèéÁõäÁéáÊúÄÂ§ß„Å®ÂõûÂèéÊúüÈñìÊúÄÂ∞è„ÅåÂêå„Åò„Å™„Çâ1„Å§„Å†„ÅëË°®Á§∫
    if best_profit == best_payback:
        st.success(f"üåü **{best_profit['name']}** „ÅåÊúÄ„ÇÇ„Åä„Åô„Åô„ÇÅ„Åß„ÅôÔºÅ")
    else:
        st.success(f"üí∞ **ÂèéÁõäÁéá„ÅåÊúÄ„ÇÇÈ´ò„ÅÑ:** {best_profit['name']}Ôºà{best_profit['ÂèéÁõäÁéá']}Ôºâ")
        st.warning(f"‚è≥ **ÂõûÂèéÊúüÈñì„ÅåÊúÄ„ÇÇÁü≠„ÅÑ:** {best_payback['name']}Ôºà{best_payback['ÂõûÂèéÊúüÈñì']}Ôºâ")

    # ÈÄöÂ∏∏„ÅÆÁµêÊûúË°®Á§∫
    st.markdown("### üìä **ÂÖ®‰∫ãÊ•≠„ÅÆÂàÜÊûêÁµêÊûú**")
    for r in results:
        #highlight = "üü¢" if r == best_profit or r == best_payback else ""
        st.subheader(f"{r['name']} „ÅÆÁµêÊûú")
        st.write(f"„ÉªÂ∏ÇÂ†¥„Çπ„Ç≥„Ç¢ : {r['Â∏ÇÂ†¥„Çπ„Ç≥„Ç¢']}")
        st.write(f"„ÉªÂàùÊúüÊäïË≥áÈ°ç : {r['ÂàùÊúüÊäïË≥áÈ°ç']}")
        st.write(f"„ÉªÊúàÈñìÂ£≤‰∏ä : {r['ÊúàÈñìÂ£≤‰∏ä']}")
        st.write(f"„ÉªÊúàÈñìÁµåË≤ª : {r['ÊúàÈñìÁµåË≤ª']}")
        st.write(f"„ÉªÊúàÈñìÂà©Áõä : {r['ÊúàÈñìÂà©Áõä']}")
        st.write(f"„ÉªÂèéÁõäÁéá : {r['ÂèéÁõäÁéá']}")
        st.write(f"„ÉªÂõûÂèéÊúüÈñì : {r['ÂõûÂèéÊúüÈñì']}")